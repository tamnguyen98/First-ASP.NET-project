Section one:
	- Use a already built system that implements users credentials
	- Program.cs is the main part of ASP
	- Startup.cs is what get initialized first
	- appsettings.json where we store all of our settings
		+ manage users secret (right click on appsetting.json)
	- wwwroot folder holds all static resource, like favicon, css, and js file
	- with cshtml (razor):
		+ to call variables, you use @ prefix variables
	- MVC app contains Model, View, Controller folder compare to just pages in Razor
	- A return View() in a controller, by default, will give you a Views>what ever the controller belong to> Index.cshtml
	- The API is soley for backend
	- controllers for MVC and API are pretty much the same
	
Setting up a database project for app that sets up a db CRUD
	- Set up a SQL Server Database Project (make sure that you have Data storage and processing AND .NET core cross-platform development installed in the tools)
	- Make a "dbo" folder (database owner)
		- Make a subfolder for Tables and Stored Procedures
	- Make a scripts folder 
	- Purpose of these folders are for easy visualization and reduce human error via automation
	- In the table settup, it doesnt matter where you add attributes, other box will update too
	- Data types:
		nvarchar can hold more characters than regular varchar becuase of unicode
		money deals with prices (Decimals
		datetime2 is newer and more efficient than one.
	- Can only have one postdeploy script!
		- Scripts is just the sql code
	- To instantiate a DB, right click the solution and hit publish
		- If you're planning on making a db more than once, you can "save Profile" of the setting
	- StoredProcedure is just essentially a script that perform sql functions
		
Making Class Library (Make sure it's a c# .net core)
	- Nuget package to install
		+ Dapper (Micro-ORM):  basically a fast as possible and simple data access
		+ Microsoft.data.sqlclient: let the project connect to the sql server
		+ Microsoft.extensions.configuration: Allow us to talk to app.setting.json (connection string)
	- ConnectionStringData let us modify the connection name quickly and easily in that file
	-IDataAccess is the main interface (communication) to reference the functions in the SqlDb.cs
	- Once finish, we can build project (Release) and use the dll in other projects
		
Coding tips:
	Type "ctor" and hit tab twice to autogenerate a code block
	- Async is pretty much threading to prevent throttling.
	- 'using' condition is just a efficient way to keep stuff within the scope (e.g close a connection automatically after it's out of the scope)
	- You can quickly make an interface for a class by ctrl+. on a class name and "extract interface"
	- Type "prop" and tab twice to generate model classes attributes
		